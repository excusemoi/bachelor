version: "3.8"

services:
  db:
    container_name: bachelor-db
    image: postgres:latest
    networks:
      - kafka_network
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=admin
    ports:
      - "5436:5432"
    volumes:
      - .database:/var/lib/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
        resources:
          limits:
            cpus: '1'
            memory: 4G
  bachelor-app:
    container_name: bachelor-app
    build: ./
    networks:
      - kafka_network
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - POSTGRES_PASSWORD=root
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - kafka_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  kafka:
    container_name: bachelor-kafka
    image: confluentinc/cp-kafka:7.3.2
    networks:
      - kafka_network
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,INTERNAL://bachelor-kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_JMX_HOSTNAME: "localhost"
      KAFKA_JMX_PORT: 31001
  prometheus:
    image: prom/prometheus:v2.40.4
    networks:
      - kafka_network
    depends_on:
      - bachelor-app
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana:9.3.0
    networks:
      - kafka_network
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=root
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana:/var/lib/grafana
volumes:
  grafana:

networks:
  kafka_network:
    name: kafka_network